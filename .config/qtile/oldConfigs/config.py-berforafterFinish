# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import os
import time
import re
import socket
import subprocess
from typing import List  # noqa: F401
from libqtile import layout, bar, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen, Rule
from libqtile.command import lazy
from libqtile.widget import Spacer
from spotify import Spotify
from scripts import storage
#import arcobattery
import colors

# mod4 or mod = super key
mod = "mod4"
mod1 = "alt"
mod2 = "control"
home = os.path.expanduser('~')
home_dir = os.path.expanduser("~")
terminal = f"alacritty --config-file {home}/.config/qtile/alacritty/alacritty.yml"


@lazy.function
def window_to_prev_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i - 1].name)


@lazy.function
def window_to_next_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i + 1].name)


keys = [

    # Most of our keybindings are in sxhkd file - except these

    # SUPER + FUNCTION KEYS

    Key([mod], "f", lazy.window.toggle_fullscreen()),
    Key([mod], "q", lazy.window.kill()),

    # SUPER + SHIFT KEYS

    Key([mod, "shift"], "q", lazy.window.kill()),
    Key([mod, "shift"], "r", lazy.restart()),
    Key(["control", "shift"],  "q", lazy.shutdown(), desc="Shutdown Qtile"),


    # QTILE LAYOUT KEYS
    Key([mod], "n", lazy.layout.normalize()),
    #Key([mod], "space", lazy.next_layout()),
    Key([mod], "space", lazy.widget["keyboardlayout"].next_keyboard(),
        desc="Next keyboard layout"),


    # CHANGE FOCUS
    Key([mod], "Up", lazy.layout.up()),
    Key([mod], "Down", lazy.layout.down()),
    Key([mod], "Left", lazy.layout.left()),
    Key([mod], "Right", lazy.layout.right()),
    Key([mod], "k", lazy.layout.up()),
    Key([mod], "j", lazy.layout.down()),
    Key([mod], "h", lazy.layout.left()),
    Key([mod], "l", lazy.layout.right()),


    # RESIZE UP, DOWN, LEFT, RIGHT
    Key([mod, "control"], "l",
        lazy.layout.grow_right(),
        lazy.layout.grow(),
        lazy.layout.increase_ratio(),
        lazy.layout.delete(),
        ),
    Key([mod, "control"], "Right",
        lazy.layout.grow_right(),
        lazy.layout.grow(),
        lazy.layout.increase_ratio(),
        lazy.layout.delete(),
        ),
    Key([mod, "control"], "h",
        lazy.layout.grow_left(),
        lazy.layout.shrink(),
        lazy.layout.decrease_ratio(),
        lazy.layout.add(),
        ),
    Key([mod, "control"], "Left",
        lazy.layout.grow_left(),
        lazy.layout.shrink(),
        lazy.layout.decrease_ratio(),
        lazy.layout.add(),
        ),
    Key([mod, "control"], "k",
        lazy.layout.grow_up(),
        lazy.layout.grow(),
        lazy.layout.decrease_nmaster(),
        ),
    Key([mod, "control"], "Up",
        lazy.layout.grow_up(),
        lazy.layout.grow(),
        lazy.layout.decrease_nmaster(),
        ),
    Key([mod, "control"], "j",
        lazy.layout.grow_down(),
        lazy.layout.shrink(),
        lazy.layout.increase_nmaster(),
        ),
    Key([mod, "control"], "Down",
        lazy.layout.grow_down(),
        lazy.layout.shrink(),
        lazy.layout.increase_nmaster(),
        ),


    # FLIP LAYOUT FOR MONADTALL/MONADWIDE
    #Key([mod, "shift"], "f", lazy.layout.flip()),

    # FLIP LAYOUT FOR BSP
    Key([mod, "mod1"], "k", lazy.layout.flip_up()),
    Key([mod, "mod1"], "j", lazy.layout.flip_down()),
    Key([mod, "mod1"], "l", lazy.layout.flip_right()),
    Key([mod, "mod1"], "h", lazy.layout.flip_left()),

    # MOVE WINDOWS UP OR DOWN BSP LAYOUT
    Key([mod, "shift"], "k", lazy.layout.shuffle_up()),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down()),
    Key([mod, "shift"], "h", lazy.layout.shuffle_left()),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right()),

    # MOVE WINDOWS UP OR DOWN MONADTALL/MONADWIDE LAYOUT
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up()),
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down()),
    Key([mod, "shift"], "Left", lazy.layout.swap_left()),
    Key([mod, "shift"], "Right", lazy.layout.swap_right()),

    # TOGGLE FLOATING LAYOUT
    Key([mod, "shift"], "space", lazy.window.toggle_floating()),
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
]


# def window_to_previous_screen(qtile, switch_group=False, switch_screen=False):
#     i = qtile.screens.index(qtile.current_screen)
#     if i != 0:
#         group = qtile.screens[i - 1].group.name
#         qtile.current_window.togroup(group, switch_group=switch_group)
#         if switch_screen == True:
#             qtile.cmd_to_screen(i - 1)
#
#
# def window_to_next_screen(qtile, switch_group=False, switch_screen=False):
#     i = qtile.screens.index(qtile.current_screen)
#     if i + 1 != len(qtile.screens):
#         group = qtile.screens[i + 1].group.name
#         qtile.current_window.togroup(group, switch_group=switch_group)
#         if switch_screen == True:
#             qtile.cmd_to_screen(i + 1)


# keys.extend([
#     # MOVE WINDOW TO NEXT SCREEN
#     Key([mod, "shift"], "Right", lazy.function(
#         window_to_next_screen, switch_screen=True)),
#     Key([mod, "shift"], "Left", lazy.function(
#         window_to_previous_screen, switch_screen=True)),
# ])

groups = []

# FOR QWERTY KEYBOARDS
group_names = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", ]

# FOR AZERTY KEYBOARDS
#group_names = ["ampersand", "eacute", "quotedbl", "apostrophe", "parenleft", "section", "egrave", "exclam", "ccedilla", "agrave",]

#group_labels = ["1 ", "2 ", "3 ", "4 ", "5 ", "6 ", "7 ", "8 ", "9 ", "0",]
#group_labels = ["", "", "", "", "", "", "", "", "", "",]
#group_labels = ["", "", "", "", "", "", "", "", "", "",]
#group_labels = ["", "", "www", "", "code", "", "漣", "", "⌘", "",]
#group_labels = ["Web", "Edit/chat", "Image", "Gimp", "Meld", "Video", "Vb", "Files", "Mail", "Music",]
group_labels = ["WWI", "WII", "III", "Code", "Dev",
                "Virit", "Files", "Mail", "Discord", "Music", ]

group_layouts = ["monadtall", "monadtall", "monadtall", "monadtall",
                 "monadtall", "monadtall", "monadtall", "monadtall", "monadtall", "monadtall", ]
#group_layouts = ["monadtall", "matrix", "monadtall", "bsp", "monadtall", "matrix", "monadtall", "bsp", "monadtall", "monadtall",]

for i in range(len(group_names)):
    groups.append(
        Group(
            name=group_names[i],
            layout=group_layouts[i].lower(),
            label=group_labels[i],
        ))

for i in groups:
    keys.extend([

        # CHANGE WORKSPACES
        Key([mod], i.name, lazy.group[i.name].toscreen()),
        Key([mod], "Tab", lazy.screen.next_group()),
        Key([mod, "shift"], "Tab", lazy.screen.prev_group()),
        Key(["mod1"], "Tab", lazy.screen.next_group()),
        Key(["mod1", "shift"], "Tab", lazy.screen.prev_group()),

        # MOVE WINDOW TO SELECTED WORKSPACE 1-10 AND STAY ON WORKSPACE
        #Key([mod, "shift"], i.name, lazy.window.togroup(i.name)),
        # MOVE WINDOW TO SELECTED WORKSPACE 1-10 AND FOLLOW MOVED WINDOW TO WORKSPACE
        Key([mod, "shift"], i.name, lazy.window.togroup(
            i.name), lazy.group[i.name].toscreen()),
    ])


colors, backgroundColor, foregroundColor, workspaceColor, foregroundColorTwo = colors.doomOne()


def init_layout_theme():
    return {
        "margin": 2,  # margin = 5
        # "border_width": 2,
        # "border_focus": "#5e81ac",
        # "border_normal": "#4c566a"
        # "border_focus": "#cc241d",
        # "border_normal": "#32302f"
        "border_focus": colors[4],
        "border_normal": colors[1]
    }


layout_theme = init_layout_theme()

layouts = [
    layout.MonadTall(**layout_theme),
    layout.Tile(**layout_theme),
    layout.Max(**layout_theme),
    layout.RatioTile(**layout_theme),
    # layout.Bsp(**layout_theme),
    # layout.TreeTab(**layout_theme)
    # layout.Floating(**layout_theme),
    # layout.Matrix(**layout_theme),
    # layout.MonadWide(**layout_theme),
]


# WIDGETS FOR THE BAR

def init_widgets_defaults():
    return dict(
        font="Ubuntu Bold",
        fontsize=12,
        padding=3,
        background=backgroundColor
    )


widget_defaults = init_widgets_defaults()


def nerd_icon(nerdfont_icon, fg_color, bg_opt=backgroundColor, font_opt="Iosevka Nerd Font", size_opt=15, pad_opt=0):
    return widget.TextBox(
        text=nerdfont_icon,
        foreground=fg_color,
        background=bg_opt,
        font=font_opt,
        fontsize=size_opt,
        padding=pad_opt
    )


def edge_sep():
    return widget.Sep(
        linewidth=3,
        padding=6,
        foreground=colors[4],
        background=backgroundColor
    )


def logo():
    return widget.Image(
        filename="~/.config/qtile/python.png",
        # filename = "/usr/share/pixmaps/archlinux-logo.png",
        background=backgroundColor,
        margin=3,
        mouse_callbacks={
            'Button1': lambda: qtile.cmd_spawn(
                'j4-dmenu'
            ),
            'Button3': lambda: qtile.cmd_spawn(
                f'{terminal} -e vim {home_dir}/.config/qtile/config.py'
            )
        }
    )


def my_sep(line_width_opt=1):
    return widget.Sep(
        linewidth=line_width_opt,
        padding=10,
        foreground=colors[2],
        background=backgroundColor
    )


def work_spaces():
    return widget.GroupBox(
        font="Ubuntu Bold",
        fontsize=12,
        margin_y=2,
        margin_x=2,
        padding_y=5,
        padding_x=5,
        borderwidth=1,
        disable_drag=True,
        # active=colors[6],
        # inactive=colors[2],
        rounded=True,
        highlight_method="block",
        this_current_screen_border=workspaceColor,
        other_current_screen_border=colors[9],
        other_screen_border=colors[1],
        foreground=colors[2],

        background=backgroundColor,
        active=colors[2],
        inactive=colors[1],
        # highlight_method="line",
        # highlight_color=[backgroundColor, workspaceColor]
    )

# Needed To Change To pngs:=> remmber


def current_layout():
    return widget.CurrentLayout(
        font="Noto Sans Bold",
        foreground=colors[6],
        background=backgroundColor
    )


def title_bar():
    return widget.WindowName(
        foreground=foregroundColor,
        background=backgroundColor,
        padding=3
    )


def system_tray():
    return widget.Systray(
        background=backgroundColor,
        icon_size=18,
        padding=5
    )




def init_widgets_list():
    prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
    widgets_list = [

        edge_sep(),
        logo(),
        work_spaces(),
        my_sep(),
        current_layout(),
        my_sep(),
        title_bar(),
        system_tray(),
        Spotify(),
        my_sep(),

        nerd_icon(" ", foregroundColorTwo, foregroundColor),
        widget.Net(
            format=" {down}↓ {up}↑ ",
            font="Ubuntu Mono",
            foreground=backgroundColor,
            background=foregroundColor,
            update_interval=2,
            mouse_callbacks={
                'Button1': lambda: qtile.cmd_spawn("def-nmdmenu")
            }
        ),

        widget.Spacer(3),
        widget.CPU(
            format=" {freq_current}GHz {load_percent}% ",
            font="Ubuntu Mono",
            # format="{load_percent}% ",
            foreground=backgroundColor,
            background=workspaceColor,
            update_interval=1,
            mouse_callbacks={
                'Button1': lambda: qtile.cmd_spawn(f"{terminal} -e gtop")
            }
        ),

        widget.Spacer(3),
        widget.ThermalSensor(
            font="Ubuntu Mono",
            foreground=backgroundColor,
            foreground_alert=colors[9],
            background=foregroundColor,
            tag_sensor="Core 0",
            update_interval=1,
            metric=True,
            padding=5,
            threshold=80,
            fmt='  {} ',
        ),

        widget.Spacer(3),
        widget.GenPollText(
            font="Ubuntu Mono",
            foreground=backgroundColor,
            background=workspaceColor,
            update_interval=5,
            func=lambda: storage.diskspace('FreeSpace'),
            mouse_callbacks={
                'Button1': lambda: qtile.cmd_spawn(f"{terminal} -e gtop")
            },
            padding=5,
            fmt=" {}"
        ),

        widget.Spacer(3),
        nerd_icon("", backgroundColor, foregroundColor, "FontAwesome", 22, 3),
        widget.GenPollText(
            font="Ubuntu Mono",
            foreground=backgroundColor,
            background=foregroundColor,
            update_interval=5,
            func=lambda: subprocess.check_output(
                f"{home}/.config/qtile/scripts/num-installed-pkgs").decode("utf-8"),
            fmt="{} "
        ),
        
        widget.Spacer(3),
        widget.Memory(
            font="Ubuntu Mono",
            format='  {MemUsed:.0f}{mm} ',
            update_interval=1,
            foreground=backgroundColor,
            background=workspaceColor,
        ),

        
        # my_sep(),
        widget.Spacer(3),
        nerd_icon(" ", foregroundColorTwo, foregroundColor),
        widget.Clock(
            font="Ubuntu Mono",
            format='%b %d %Y',
            # font="JetBrainsMono Nerd Font",
            foreground=backgroundColor,
            background=foregroundColor
        ),

        nerd_icon(" ", foregroundColorTwo, foregroundColor),
        widget.Clock(
            font="Ubuntu Mono",
            format='%I:%M %p',
            foreground=backgroundColor,
            background=foregroundColor
        ),

        my_sep(),
        nerd_icon("", colors[4], backgroundColor, "Ubuntu Mono", 20, 3),
        widget.Volume(
            font="Ubuntu Mono",
            padding=2,
        ),
        widget.KeyboardLayout(
            configured_keyboards=['us', 'ar'],
            padding=4,
        ),

        edge_sep()
    ]
    return widgets_list


widgets_list = init_widgets_list()


def init_widgets_screen1():
    widgets_screen1 = init_widgets_list()
    return widgets_screen1


def init_widgets_screen2():
    widgets_screen2 = init_widgets_list()
    return widgets_screen2


widgets_screen1 = init_widgets_screen1()
widgets_screen2 = init_widgets_screen2()


# def init_screens():
#     return [Screen(top=bar.Bar(widgets=init_widgets_screen1(), size=26, opacity=0.8)),
#             Screen(top=bar.Bar(widgets=init_widgets_screen2(), size=26, opacity=0.8))]
def init_screens():
    return [Screen(top=bar.Bar(widgets=init_widgets_list(), size=26, opacity=0.8))]


screens = init_screens()


# MOUSE CONFIGURATION
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size())
]

dgroups_key_binder = None
dgroups_app_rules = []

# ASSIGN APPLICATIONS TO A SPECIFIC GROUPNAME
# BEGIN

#########################################################
################ assgin apps to groups ##################
#########################################################


@hook.subscribe.client_new
def assign_app_group(client):
    d = {}
    #####################################################################################
    ### Use xprop fo find  the value of WM_CLASS(STRING) -> First field is sufficient ###
    #####################################################################################
#    d[group_names[0]] = ["Navigator", "Firefox", "Vivaldi-stable", "Vivaldi-snapshot", "Chromium", "Google-chrome", "Brave", "Brave-browser", "navigator", "firefox", "vivaldi-stable", "vivaldi-snapshot", "chromium", "google-chrome", "brave", "brave-browser", ]
#    d[group_names[1]] = [ "Atom", "Subl", "Geany", "Brackets", "Code-oss", "Code", "TelegramDesktop", "Discord", "atom", "subl", "geany", "brackets", "code-oss", "code", "telegramDesktop", "discord", ]
#    d[group_names[2]] = ["Inkscape", "Nomacs", "Ristretto", "Nitrogen", "Feh", "inkscape", "nomacs", "ristretto", "nitrogen", "feh", ]
#    d[group_names[3]] = ["Gimp", "gimp" ]
#    d[group_names[4]] = ["Meld", "meld", "org.gnome.meld" "org.gnome.Meld" ]
#    d[group_names[5]] = ["Vlc","vlc", "Mpv", "mpv" ]
#    d[group_names[6]] = ["VirtualBox Manager", "VirtualBox Machine", "Vmplayer", "virtualbox manager", "virtualbox machine", "vmplayer", ]
#    d[group_names[7]] = ["Thunar", "Nemo", "Caja", "Nautilus", "org.gnome.Nautilus", "Pcmanfm", "Pcmanfm-qt", "thunar", "nemo", "caja", "nautilus", "org.gnome.nautilus", "pcmanfm", "pcmanfm-qt", ]
#    d[group_names[8]] = ["Evolution", "Geary", "Mail", "Thunderbird","evolution", "geary", "mail", "thunderbird", "discord" ]
#    d[group_names[9]] = ["Spotify", "Pragha", "Clementine", "Deadbeef", "Audacious", "spotify", "pragha", "clementine", "deadbeef", "audacious" ]
    d[group_names[0][0]] = []
    d[group_names[1][0]] = []
    d[group_names[2][0]] = []
    d[group_names[3][0]] = []
    d[group_names[4][0]] = ["VirtualBox Machine", "virtualbox machine", ]
    d[group_names[5][0]] = ["VirtualBox Manager",
                            "Vmplayer", "virtualbox manager", "vmplayer", ]
    d[group_names[6][0]] = []
    d[group_names[7][0]] = ["thunderbird"]
    d[group_names[8][0]] = ["discord", "Discord", ]
    d[group_names[9][0]] = ["spotify", "Spotify", ]
    ######################################################################################

    wm_class = client.window.get_wm_class()[0]
    for i in range(len(d)):
        if wm_class in list(d.values())[i]:
            group = list(d.keys())[i]
            client.togroup(group)
            client.group.cmd_toscreen(toggle=True)
            # client.group.cmd_toscreen(toggle=False)

# END
# ASSIGN APPLICATIONS TO A SPECIFIC GROUPNAME


@hook.subscribe.client_new
def slight_delay(window):
    time.sleep(0.01)


main = None

# @hook.subscribe.startup_once
# def start_once():
#     home = os.path.expanduser('~')
#     subprocess.call([home + '/.config/qtile/scripts/autostart.sh'])


@hook.subscribe.startup
def start_once():
    start_script = os.path.expanduser("~/.config/qtile/scripts/autostart.sh")
    subprocess.call([start_script])


@hook.subscribe.startup_once
def start_always():
    # Set the cursor to something sane in X
    subprocess.Popen(['xsetroot', '-cursor_name', 'left_ptr'])


@hook.subscribe.client_new
def set_floating(window):
    if (window.window.get_wm_transient_for()
            or window.window.get_wm_type() in floating_types):
        window.floating = True


floating_types = ["notification", "toolbar", "splash", "dialog"]


follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    *layout.Floating.default_float_rules,
    Match(wm_class='confirmreset'),  # gitk
    Match(wm_class='makebranch'),  # gitk
    Match(wm_class='maketag'),  # gitk
    Match(wm_class='ssh-askpass'),  # ssh-askpass
    Match(title='branchdialog'),  # gitk
    Match(title='pinentry'),  # GPG key password entry
    Match(wm_class='Arcolinux-welcome-app.py'),
    Match(wm_class='Arcolinux-calamares-tool.py'),
    Match(wm_class='confirm'),
    Match(wm_class='dialog'),
    Match(wm_class='download'),
    Match(wm_class='error'),
    Match(wm_class='file_progress'),
    Match(wm_class='notification'),
    Match(wm_class='splash'),
    Match(wm_class='toolbar'),
    Match(wm_class='Arandr'),
    Match(wm_class='feh'),
    Match(wm_class='Galculator'),
    Match(wm_class='archlinux-logout'),
    Match(wm_class='PulseAudio Volume Control'),
    Match(wm_class='pavucontrol'),
    Match(wm_class='virtualbox manger'),
    Match(wm_class='VirtualBox Manger'),
    Match(wm_class='Oracle VM VirtualBox Manger'),
    Match(wm_class='Oracle VM VirtualBox'),
    #    Match(wm_class='xfce4-terminal'),

],  fullscreen_border_width=0, border_width=0)
auto_fullscreen = True

focus_on_window_activation = "focus"  # or smart

wmname = "LG3D"
